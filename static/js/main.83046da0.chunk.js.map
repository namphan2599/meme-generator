{"version":3,"sources":["components/Header.js","components/Generator.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","styles","header","img","src","alt","text","height","display","alignItems","justifyContent","background","fontFamily","fontSize","marginLeft","form","width","margin","input","button","border","meme","position","memeImg","h2","color","left","transform","textTransform","textShadow","top","bottom","Generator","state","topText","bottomText","randMemeImg","allMemeImgs","handleChange","bind","handleSubmit","event","target","name","value","this","setState","fetch","then","response","json","memes","data","preventDefault","randNum","Math","floor","random","length","randMeme","url","onSubmit","type","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sPAEe,SAASA,IACpB,OACI,4BAAQC,MAAOC,EAAOC,QAClB,yBACIF,MAAOC,EAAOE,IACdC,IAAI,iEACJC,IAAI,aAER,uBAAGL,MAAOC,EAAOK,MAAjB,mBAKZ,IAAML,EAAS,CACXC,OAAQ,CACJK,OAAQ,QACRC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,WAAY,WAEhBR,IAAK,CACDI,OAAQ,OAEZD,KAAM,CACFM,WAAY,mBACZC,SAAU,OACVC,WAAY,S,yDC3Bdb,EAAS,CACXc,KAAM,CACFC,MAAO,MACPR,QAAS,OACTE,eAAgB,SAChBO,OAAQ,aAEZC,MAAO,CACHF,MAAO,MACPT,OAAQ,OACRM,SAAU,QAEdM,OAAQ,CACJC,OAAQ,OACRP,SAAU,OACVF,WAAY,WAEhBU,KAAM,CACFC,SAAU,WACVN,MAAO,MACPC,OAAQ,QAEZM,QAAS,CACLP,MAAO,QAEXQ,GAAI,CACAR,MAAO,MACPS,MAAO,aACPH,SAAU,WACVI,KAAM,MACNC,UAAW,mBACXd,SAAU,OACVD,WAAY,qBACZgB,cAAe,YACfC,WAAY,6GAEhBC,IAAK,CACDA,IAAK,KAETC,OAAQ,CACJA,OAAQ,MA4EDC,E,YArEX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,YAAa,gCACbC,YAAa,IAGjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVV,E,0EAcDE,GAAQ,IAAD,EACMA,EAAMC,OAArBC,EADS,EACTA,KAAMC,EADG,EACHA,MACbC,KAAKC,SAAL,eACKH,EAAOC,M,0CAIK,IAAD,OAChBG,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MACP,EAAKL,SAAS,CACVT,YAAac,S,mCAKhBV,GACTA,EAAMY,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWZ,KAAKZ,MAAMI,YAAYqB,QAC5DC,EAAWd,KAAKZ,MAAMI,YAAYiB,GAASM,IACjDf,KAAKC,SAAS,CACVV,YAAauB,M,+BAKjB,OACI,6BACI,0BAAM3D,MAAOC,EAAOc,KAAM8C,SAAUhB,KAAKL,cACrC,2BACIxC,MAAOC,EAAOiB,MACd4C,KAAK,OACLnB,KAAK,UACLoB,SAAUlB,KAAKP,eAEnB,2BACItC,MAAOC,EAAOiB,MACd4C,KAAK,OACLnB,KAAK,aACLoB,SAAUlB,KAAKP,eAEnB,4BAAQtC,MAAOC,EAAOkB,QAAtB,QAEJ,yBAAKnB,MAAOC,EAAOoB,MACf,yBAAKrB,MAAOC,EAAOsB,QAASnB,IAAKyC,KAAKZ,MAAMG,YAAa/B,IAAI,SAC7D,wBAAIL,MAAK,eAAMC,EAAOuB,GAAb,GAAoBvB,EAAO6B,MAAOe,KAAKZ,MAAMC,SACtD,wBAAIlC,MAAK,eAAMC,EAAOuB,GAAb,GAAoBvB,EAAO8B,SAAUc,KAAKZ,MAAME,kB,GAhErD6B,a,MCjCTC,MATf,WACE,OACE,6BACG,kBAAClE,EAAD,MACA,kBAAC,EAAD,QCGamE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.83046da0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return(\r\n        <header style={styles.header}>\r\n            <img \r\n                style={styles.img}\r\n                src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" \r\n                alt=\"Problem?\"\r\n            />\r\n            <p style={styles.text}>Meme Generator</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst styles = {\r\n    header: {\r\n        height: '100px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: '#c6ff00'\r\n    },\r\n    img: {\r\n        height: '80%'\r\n    },\r\n    text: {\r\n        fontFamily: 'VT323, monospace',\r\n        fontSize: '50px',\r\n        marginLeft: '60px'\r\n    }\r\n}","import React, {Component} from 'react'\r\n\r\nconst styles = {\r\n    form: {\r\n        width: '90%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        margin: '20px auto'\r\n    },\r\n    input: {\r\n        width: '45%',\r\n        height: '40px',\r\n        fontSize: '30px'\r\n    },\r\n    button: {\r\n        border: 'none',\r\n        fontSize: '25px',\r\n        background: '#c6ff00'\r\n    },\r\n    meme: {\r\n        position: 'relative',\r\n        width: '90%',\r\n        margin: 'auto'\r\n    },\r\n    memeImg: {\r\n        width: '100%'\r\n    }, \r\n    h2: {\r\n        width: '80%',\r\n        color: 'whitesmoke',\r\n        position: 'absolute',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n        fontSize: '50px',\r\n        fontFamily: 'impact, sans-serif',\r\n        textTransform: 'uppercase',\r\n        textShadow: '2px 2px 0 #000, -2px -2px 0 #000, 2px -2px 0 #000,-2px 2px 0 #000,0 2px 0 #000,2px 0 0 #000,0 -2px 0 #000'\r\n    },\r\n    top: {\r\n        top: '0'\r\n    },\r\n    bottom: {\r\n        bottom: '0'\r\n    }\r\n\r\n}\r\n\r\nclass Generator extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            topText: '',\r\n            bottomText: '',\r\n            randMemeImg: 'http://i.imgflip.com/1bij.jpg',\r\n            allMemeImgs: []\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n\r\n    }\r\n\r\n    handleChange(event) {\r\n        const {name, value} = event.target\r\n        this.setState({\r\n            [name]: value\r\n        }) \r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const {memes} = response.data\r\n                this.setState({\r\n                    allMemeImgs: memes\r\n                })\r\n            })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        const randMeme = this.state.allMemeImgs[randNum].url\r\n        this.setState({\r\n            randMemeImg: randMeme\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <form style={styles.form} onSubmit={this.handleSubmit}>\r\n                    <input \r\n                        style={styles.input}\r\n                        type=\"text\"\r\n                        name=\"topText\"\r\n                        onChange={this.handleChange}\r\n                         />\r\n                    <input \r\n                        style={styles.input}\r\n                        type=\"text\" \r\n                        name=\"bottomText\"\r\n                        onChange={this.handleChange}\r\n                        />\r\n                    <button style={styles.button}>GEN</button>\r\n                </form>\r\n                <div style={styles.meme}>\r\n                    <img style={styles.memeImg} src={this.state.randMemeImg} alt=\"meme\"/>\r\n                    <h2 style={{...styles.h2, ...styles.top}}>{this.state.topText}</h2>\r\n                    <h2 style={{...styles.h2, ...styles.bottom}}>{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Generator\r\n\r\n","import React from 'react';\nimport Header from './components/Header'\nimport Generator from './components/Generator'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n       <Header />\n       <Generator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}